{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ListarPensamentoComponent = class ListarPensamentoComponent {\n  //assim tenho acesso a todos os metodos desse service\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.listaPensamentos = []; //array para conter os pensamentos\n    this.paginaAtual = 1;\n    this.haMaisPensamentos = true;\n    this.filtro = '';\n    this.favoritos = false;\n    this.listaFavoritos = [];\n  }\n  ngOnInit() {\n    this.service.listar(this.paginaAtual, this.filtro, this.favoritos).subscribe(listaPensamentos => {\n      this.listaPensamentos = listaPensamentos; //vai receber a lista que vai ser obtida no obsevable\n    }); //pegando esse metodo o subscribe o observable vai entender que e necessario emitir notificações sempre que tiver uma mudança assim vamos conseguir listar os pensamentos\n  }\n\n  carregarMaisPensamentos() {\n    this.service.listar(++this.paginaAtual, this.filtro, this.favoritos).subscribe(listaPensamentos => {\n      this.listaPensamentos.push(...listaPensamentos); //...quero que essa lista seja acrescida os pensamentos que ja existem e mais os que forem renderizados\n      if (!listaPensamentos.length) {\n        this.haMaisPensamentos = false;\n      }\n    });\n  }\n  pesquisarPensamentos() {\n    this.haMaisPensamentos = true; //quero que o botão sempre seja renderizado quando pesquisar\n    this.paginaAtual = 1; //renicializar com 1\n    this.service.listar(this.paginaAtual, this.filtro, this.favoritos).subscribe(listaPensamentos => {\n      this.listaPensamentos = listaPensamentos; // lista vai receber lista retornada\n    });\n  }\n\n  recarregarComponente() {}\n  listarFavoritos() {\n    this.favoritos = true;\n    this.haMaisPensamentos = true; //quero que o botão carregar mais pensamentos apareça caso vier muitos favoritos\n    this.paginaAtual = 1;\n    this.service.listar(this.paginaAtual, this.filtro, this.favoritos).subscribe(listaPensamentoFavoritos => {\n      this.listaPensamentos = listaPensamentoFavoritos;\n      this.listaFavoritos = listaPensamentoFavoritos;\n    });\n  }\n};\nListarPensamentoComponent = __decorate([Component({\n  selector: 'app-listar-pensamento',\n  templateUrl: './listar-pensamento.component.html',\n  styleUrls: ['./listar-pensamento.component.css']\n})], ListarPensamentoComponent);\nexport { ListarPensamentoComponent };","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,QAAgB,eAAe;AAO1C,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EASnC;EACAC,YACSC,OAA0B,EAC1BC,MAAa;IADb,YAAO,GAAPD,OAAO;IACP,WAAM,GAANC,MAAM;IAVf,qBAAgB,GAAiB,EAAE;IACnC,gBAAW,GAAU,CAAC;IACtB,sBAAiB,GAAS,IAAI;IAC9B,WAAM,GAAU,EAAE;IAClB,cAAS,GAAS,KAAK;IACvB,mBAAc,GAAgB,EAAE;EAM7B;EAEHC,QAAQ;IACP,IAAI,CAACF,OAAO,CAACG,MAAM,CAAC,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,SAAS,CAAC,CAACC,SAAS,CAAEC,gBAAgB,IAAI;MAChG,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB,CAAC;IAC3C,CAAC,CAAC,CAAC;EACJ;;EAEAC,uBAAuB;IACtB,IAAI,CAACT,OAAO,CAACG,MAAM,CAAC,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,SAAS,CAAC,CACnEC,SAAS,CAACC,gBAAgB,IAAG;MAC5B,IAAI,CAACA,gBAAgB,CAACE,IAAI,CAAC,GAAGF,gBAAgB,CAAC;MAE/C,IAAG,CAACA,gBAAgB,CAACG,MAAM,EAAC;QAC1B,IAAI,CAACC,iBAAiB,GAAG,KAAK;;IAElC,CAAC,CAAC;EACH;EAEAC,oBAAoB;IACjB,IAAI,CAACD,iBAAiB,GAAG,IAAI,CAAC;IAC9B,IAAI,CAACR,WAAW,GAAG,CAAC,CAAC;IACrB,IAAI,CAACJ,OAAO,CAACG,MAAM,CAAC,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,SAAS,CAAC,CACjEC,SAAS,CAACC,gBAAgB,IAAG;MAC5B,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB,EAAC;IAC3C,CAAC,CAAC;EACL;;EAEAM,oBAAoB,IAGpB;EAEAC,eAAe;IACd,IAAI,CAACT,SAAS,GAAC,IAAI;IAClB,IAAI,CAACM,iBAAiB,GAAG,IAAI,CAAC;IAC9B,IAAI,CAACR,WAAW,GAAG,CAAC;IACpB,IAAI,CAACJ,OAAO,CAACG,MAAM,CAAC,IAAI,CAACC,WAAW,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,SAAS,CAAC,CACjEC,SAAS,CAAES,wBAAwB,IAAG;MACtC,IAAI,CAACR,gBAAgB,GAAGQ,wBAAwB;MAChD,IAAI,CAACC,cAAc,GAAGD,wBAAwB;IAC/C,CAAC,CAAC;EACH;CAGH;AA1DYlB,yBAAyB,eALrCD,SAAS,CAAC;EACTqB,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,GACWtB,yBAAyB,CA0DrC;SA1DYA,yBAAyB","names":["Component","ListarPensamentoComponent","constructor","service","router","ngOnInit","listar","paginaAtual","filtro","favoritos","subscribe","listaPensamentos","carregarMaisPensamentos","push","length","haMaisPensamentos","pesquisarPensamentos","recarregarComponente","listarFavoritos","listaPensamentoFavoritos","listaFavoritos","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Natha\\meu-primeiro-app\\src\\app\\componentes\\pensamentos\\listar-pensamento\\listar-pensamento.component.ts"],"sourcesContent":["import { PensamentoService } from './../pensamento.service';\nimport { Pensamento } from './../pensamento';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-listar-pensamento',\n  templateUrl: './listar-pensamento.component.html',\n  styleUrls: ['./listar-pensamento.component.css']\n})\nexport class ListarPensamentoComponent implements OnInit {\n\n   listaPensamentos: Pensamento[] = []//array para conter os pensamentos\n   paginaAtual:number = 1;\n   haMaisPensamentos:boolean=true;\n   filtro:string = '';\n   favoritos:boolean=false;\n   listaFavoritos:Pensamento[] = [];\n\n   //assim tenho acesso a todos os metodos desse service\n   constructor(\n    private service: PensamentoService,\n    private router: Route\n    ){}\n\n   ngOnInit(): void {//toda logica que eu queira que seja executada assim que o componente for carregado coloco aqui\n    this.service.listar(this.paginaAtual, this.filtro, this.favoritos).subscribe((listaPensamentos) =>{\n      this.listaPensamentos = listaPensamentos;//vai receber a lista que vai ser obtida no obsevable\n    });//pegando esse metodo o subscribe o observable vai entender que e necessario emitir notificações sempre que tiver uma mudança assim vamos conseguir listar os pensamentos\n   }\n\n   carregarMaisPensamentos(){\n    this.service.listar(++this.paginaAtual, this.filtro, this.favoritos)\n    .subscribe(listaPensamentos =>{\n      this.listaPensamentos.push(...listaPensamentos)//...quero que essa lista seja acrescida os pensamentos que ja existem e mais os que forem renderizados\n\n      if(!listaPensamentos.length){\n        this.haMaisPensamentos = false\n      }\n    })\n   }\n\n   pesquisarPensamentos(){\n      this.haMaisPensamentos = true;//quero que o botão sempre seja renderizado quando pesquisar\n      this.paginaAtual = 1;//renicializar com 1\n      this.service.listar(this.paginaAtual, this.filtro, this.favoritos)\n      .subscribe(listaPensamentos => {\n        this.listaPensamentos = listaPensamentos // lista vai receber lista retornada\n      })\n   }\n\n   recarregarComponente(){\n\n\n   }\n\n   listarFavoritos(){\n    this.favoritos=true;\n     this.haMaisPensamentos = true;//quero que o botão carregar mais pensamentos apareça caso vier muitos favoritos\n     this.paginaAtual = 1;\n     this.service.listar(this.paginaAtual, this.filtro, this.favoritos)\n     .subscribe( listaPensamentoFavoritos =>{\n      this.listaPensamentos = listaPensamentoFavoritos\n      this.listaFavoritos = listaPensamentoFavoritos\n     })\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}