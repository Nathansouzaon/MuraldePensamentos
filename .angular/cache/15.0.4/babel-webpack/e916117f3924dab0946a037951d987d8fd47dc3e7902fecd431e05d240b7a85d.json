{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PensamentoService {\n  //tenho acesso a todos os metodos dessa classe httpclient\n  constructor(http) {\n    this.http = http;\n    this.API = 'http://localhost:3000/pensamentos';\n  }\n  listar(pagina) {\n    const itensPorPagina = 6;\n    //GET /posts?_page=7&_limit=20\n    //array de pensamentos porque vamos receber uma lista\n    return this.http.get(this.API); //me da a lista de pensamentos da api\n  }\n\n  criar(pensamento) {\n    return this.http.post(this.API, pensamento);\n  }\n  editar(pensamento) {\n    const url = `${this.API}/${pensamento.id}`;\n    return this.http.put(url, pensamento);\n  }\n  excluir(id) {\n    const url = `${this.API}/${id}`; //passar a url e vou passar /id que e o id do pensamento\n    return this.http.delete(url);\n  }\n  buscarPorId(id) {\n    const url = `${this.API}/${id}`; //passar a url e vou passar /id que e o id do pensamento\n    return this.http.get(url); //quero buscar 1 pensamento\n  }\n}\n\nPensamentoService.ɵfac = function PensamentoService_Factory(t) {\n  return new (t || PensamentoService)(i0.ɵɵinject(i1.HttpClient));\n};\nPensamentoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PensamentoService,\n  factory: PensamentoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,iBAAiB;EAG9B;EACEC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,QAAG,GAAG,mCAAmC;EAElB;EAExCC,MAAM,CAACC,MAAa;IAElB,MAAMC,cAAc,GAAG,CAAC;IAGxB;IAIA;IACA,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAe,IAAI,CAACC,GAAG,CAAC;EAE9C;;EAEAC,KAAK,CAACC,UAAqB;IACzB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAa,IAAI,CAACH,GAAG,EAAEE,UAAU,CAAC;EACzD;EAEEE,MAAM,CAACF,UAAqB;IAC1B,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACL,GAAG,IAAIE,UAAU,CAACI,EAAE,EAAE;IAC1C,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAaF,GAAG,EAAEH,UAAU,CAAC;EACnD;EAEFM,OAAO,CAACF,EAAS;IACf,MAAMD,GAAG,GAAG,GAAG,IAAI,CAACL,GAAG,IAAIM,EAAE,EAAE,CAAC;IAChC,OAAO,IAAI,CAACX,IAAI,CAACc,MAAM,CAAaJ,GAAG,CAAC;EAC1C;EAEAK,WAAW,CAACJ,EAAS;IACnB,MAAMD,GAAG,GAAG,GAAG,IAAI,CAACL,GAAG,IAAIM,EAAE,EAAE,CAAC;IAChC,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAaM,GAAG,CAAC,CAAC;EACxC;;;AArCWZ,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAkB,SAAjBlB,iBAAiB;EAAAmB,YAHhB;AAAM","names":["PensamentoService","constructor","http","listar","pagina","itensPorPagina","get","API","criar","pensamento","post","editar","url","id","put","excluir","delete","buscarPorId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Natha\\meu-primeiro-app\\src\\app\\componentes\\pensamentos\\pensamento.service.ts"],"sourcesContent":["import { Pensamento } from './pensamento';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({//vai dizer pro angular que essa e uma classe injetavel pode ser utilizada em outros componentes outras classes através de um metodo chamado injeção de dependências\n  providedIn: 'root'\n  //metadado providein esse nome vem do nome provedor fornecedor esse serviço pode ser disponibilizado para toda aplicação por que o valor dele está como root\n})\nexport class PensamentoService {\n\n  private readonly API = 'http://localhost:3000/pensamentos';\n//tenho acesso a todos os metodos dessa classe httpclient\n  constructor(private http: HttpClient) { }\n\n  listar(pagina:number): Observable<Pensamento[]>{\n\n    const itensPorPagina = 6;\n    \n\n    //GET /posts?_page=7&_limit=20\n\n\n\n    //array de pensamentos porque vamos receber uma lista\n    return this.http.get<Pensamento[]>(this.API)//me da a lista de pensamentos da api\n\n  }\n\n  criar(pensamento:Pensamento): Observable<Pensamento>{\n    return this.http.post<Pensamento>(this.API, pensamento);\n  }\n\n    editar(pensamento:Pensamento): Observable<Pensamento>{\n      const url = `${this.API}/${pensamento.id}`;\n      return this.http.put<Pensamento>(url, pensamento);\n    }\n\n  excluir(id:number):Observable<Pensamento>{\n    const url = `${this.API}/${id}`;//passar a url e vou passar /id que e o id do pensamento\n    return this.http.delete<Pensamento>(url);\n  }\n\n  buscarPorId(id:number):Observable<Pensamento>{\n    const url = `${this.API}/${id}`;//passar a url e vou passar /id que e o id do pensamento\n    return this.http.get<Pensamento>(url);//quero buscar 1 pensamento\n  }\n\n\n\n\n}\n\n//dependencia da classe httpClient viesse até o pensamento service\n//a injeção de dependências e um padrao de projeto onde uma classe vai solicitar dependências externas ao inves cria-las\n//private esse atributo e automaticamente declarado como atributo da classe\n\n//observable funciona de forma parecida como as promisses podem ser uma transferencia de dados continua eles podem emitir dados varias vezes durante sua existencia\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}