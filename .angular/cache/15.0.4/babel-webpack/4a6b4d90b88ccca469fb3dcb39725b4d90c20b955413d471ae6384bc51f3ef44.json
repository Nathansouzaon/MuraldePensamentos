{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PensamentoService {\n  //tenho acesso a todos os metodos dessa classe httpclient\n  constructor(http) {\n    this.http = http;\n    this.API = 'http://localhost:3000/pensamentos';\n  }\n  listar() {\n    //array de pensamentos porque vamos receber uma lista\n    return this.http.get(this.API); //me da a lista de pensamentos da api\n  }\n\n  criar(pensamento) {\n    return this.http.post(this.API.p);\n  }\n}\nPensamentoService.ɵfac = function PensamentoService_Factory(t) {\n  return new (t || PensamentoService)(i0.ɵɵinject(i1.HttpClient));\n};\nPensamentoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PensamentoService,\n  factory: PensamentoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,iBAAiB;EAG9B;EACEC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,QAAG,GAAG,mCAAmC;EAElB;EAExCC,MAAM;IACJ;IACA,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAe,IAAI,CAACC,GAAG,CAAC;EAC9C;;EAEAC,KAAK,CAACC,UAAqB;IACzB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAa,IAAI,CAACH,GAAG,CAACI,CAAC,CAAC;EAC/C;;AAbWT,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAU,SAAjBV,iBAAiB;EAAAW,YAHhB;AAAM","names":["PensamentoService","constructor","http","listar","get","API","criar","pensamento","post","p","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Natha\\meu-primeiro-app\\src\\app\\componentes\\pensamentos\\pensamento.service.ts"],"sourcesContent":["import { Pensamento } from './pensamento';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({//vai dizer pro angular que essa e uma classe injetavel pode ser utilizada em outros componentes outras classes através de um metodo chamado injeção de dependências\n  providedIn: 'root'\n  //metadado providein esse nome vem do nome provedor fornecedor esse serviço pode ser disponibilizado para toda aplicação por que o valor dele está como root\n})\nexport class PensamentoService {\n\n  private readonly API = 'http://localhost:3000/pensamentos';\n//tenho acesso a todos os metodos dessa classe httpclient\n  constructor(private http: HttpClient) { }\n\n  listar(): Observable<Pensamento[]>{\n    //array de pensamentos porque vamos receber uma lista\n    return this.http.get<Pensamento[]>(this.API)//me da a lista de pensamentos da api\n  }\n\n  criar(pensamento:Pensamento): Observable<Pensamento>{\n    return this.http.post<Pensamento>(this.API.p)\n  }\n\n\n\n\n}\n\n//dependencia da classe httpClient viesse até o pensamento service\n//a injeção de dependências e um padrao de projeto onde uma classe vai solicitar dependências externas ao inves cria-las\n//private esse atributo e automaticamente declarado como atributo da classe\n\n//observable funciona de forma parecida como as promisses podem ser uma transferencia de dados continua eles podem emitir dados varias vezes durante sua existencia\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}