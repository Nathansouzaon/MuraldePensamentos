{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PensamentoService {\n  //tenho acesso a todos os metodos dessa classe httpclient\n  constructor(http) {\n    this.http = http;\n    this.API = 'http://localhost:3000/pensamentos';\n  }\n  listar(pagina, filtro) {\n    const itensPorPagina = 6;\n    let params = new HttpParams() //passar parametros\n    .set(\"_page\", pagina).set(\"_limit\", itensPorPagina); //metodo set serve para substituir um valor passamos o nome do parametro e o valor\n    //imutavel toda operação de mudança vai retornar uma nova instancia\n    if (filtro.trim().length > 2) {\n      params = params.set(\"q\", filtro); //q representa o filtro\n    } //trim remove os espaços vazio da string\n    return this.http.get(this.API, {\n      params\n    }); //quando temos a var com o mesmo nome da chave podemos omitir\n  }\n\n  criar(pensamento) {\n    return this.http.post(this.API, pensamento);\n  }\n  editar(pensamento) {\n    const url = `${this.API}/${pensamento.id}`;\n    return this.http.put(url, pensamento); //passando a url e o pensamento que vai ser editado\n  }\n\n  mudarFavorito(pensamento) {\n    pensamento.favorito = !pensamento.favorito; //se for true vai ser false e false vai ser true\n    //agora usar o metodo http para conseguir editar e atualizar o pensamento\n    return this.editar(pensamento);\n  }\n  excluir(id) {\n    const url = `${this.API}/${id}`; //passar a url e vou passar /id que e o id do pensamento\n    return this.http.delete(url);\n  }\n  buscarPorId(id) {\n    const url = `${this.API}/${id}`; //passar a url e vou passar /id que e o id do pensamento\n    return this.http.get(url); //quero buscar 1 pensamento\n  }\n}\n\nPensamentoService.ɵfac = function PensamentoService_Factory(t) {\n  return new (t || PensamentoService)(i0.ɵɵinject(i1.HttpClient));\n};\nPensamentoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PensamentoService,\n  factory: PensamentoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,iBAAiB;EAG9B;EACEC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,QAAG,GAAG,mCAAmC;EAElB;EAExCC,MAAM,CAACC,MAAa,EAAEC,MAAa;IAEjC,MAAMC,cAAc,GAAG,CAAC;IACxB,IAAIC,MAAM,GAAG,IAAIR,UAAU,EAAE;IAAA,CAC5BS,GAAG,CAAC,OAAO,EAAEJ,MAAM,CAAC,CACpBI,GAAG,CAAC,QAAQ,EAAEF,cAAc,CAAC,CAAC;IAC/B;IAEA,IAAGD,MAAM,CAACI,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC,EAAC;MAC1BH,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,GAAG,EAAEH,MAAM,CAAC,CAAC;KAClC;IAED,OAAO,IAAI,CAACH,IAAI,CAACS,GAAG,CAAe,IAAI,CAACC,GAAG,EAAE;MAAEL;IAAM,CAAE,CAAC;EAC1D;;EAIAM,KAAK,CAACC,UAAqB;IACzB,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAa,IAAI,CAACH,GAAG,EAAEE,UAAU,CAAC;EACzD;EAEEE,MAAM,CAACF,UAAqB;IAC1B,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACL,GAAG,IAAIE,UAAU,CAACI,EAAE,EAAE;IAC1C,OAAO,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAaF,GAAG,EAAEH,UAAU,CAAC,CAAC;EACpD;;EAEAM,aAAa,CAACN,UAAsB;IAClCA,UAAU,CAACO,QAAQ,GAAG,CAACP,UAAU,CAACO,QAAQ,CAAC;IAC3C;IACA,OAAO,IAAI,CAACL,MAAM,CAACF,UAAU,CAAC;EAChC;EAEFQ,OAAO,CAACJ,EAAS;IACf,MAAMD,GAAG,GAAG,GAAG,IAAI,CAACL,GAAG,IAAIM,EAAE,EAAE,CAAC;IAChC,OAAO,IAAI,CAAChB,IAAI,CAACqB,MAAM,CAAaN,GAAG,CAAC;EAC1C;EAEAO,WAAW,CAACN,EAAS;IACnB,MAAMD,GAAG,GAAG,GAAG,IAAI,CAACL,GAAG,IAAIM,EAAE,EAAE,CAAC;IAChC,OAAO,IAAI,CAAChB,IAAI,CAACS,GAAG,CAAaM,GAAG,CAAC,CAAC;EACxC;;;AA9CWjB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAyB,SAAjBzB,iBAAiB;EAAA0B,YAHhB;AAAM","names":["HttpParams","PensamentoService","constructor","http","listar","pagina","filtro","itensPorPagina","params","set","trim","length","get","API","criar","pensamento","post","editar","url","id","put","mudarFavorito","favorito","excluir","delete","buscarPorId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Natha\\meu-primeiro-app\\src\\app\\componentes\\pensamentos\\pensamento.service.ts"],"sourcesContent":["import { Pensamento } from './pensamento';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({//vai dizer pro angular que essa e uma classe injetavel pode ser utilizada em outros componentes outras classes através de um metodo chamado injeção de dependências\n  providedIn: 'root'\n  //metadado providein esse nome vem do nome provedor fornecedor esse serviço pode ser disponibilizado para toda aplicação por que o valor dele está como root\n})\nexport class PensamentoService {\n\n  private readonly API = 'http://localhost:3000/pensamentos';\n//tenho acesso a todos os metodos dessa classe httpclient\n  constructor(private http: HttpClient) { }\n\n  listar(pagina:number, filtro:string): Observable<Pensamento[]>{\n\n    const itensPorPagina = 6;\n    let params = new HttpParams()//passar parametros\n    .set(\"_page\", pagina)\n    .set(\"_limit\", itensPorPagina);//metodo set serve para substituir um valor passamos o nome do parametro e o valor\n    //imutavel toda operação de mudança vai retornar uma nova instancia\n\n    if(filtro.trim().length > 2){\n      params = params.set(\"q\", filtro);//q representa o filtro\n    }//trim remove os espaços vazio da string\n\n    return this.http.get<Pensamento[]>(this.API, { params })//quando temos a var com o mesmo nome da chave podemos omitir\n  }\n\n  listarPensamentosFavoritos\n\n  criar(pensamento:Pensamento): Observable<Pensamento>{\n    return this.http.post<Pensamento>(this.API, pensamento);\n  }\n\n    editar(pensamento:Pensamento): Observable<Pensamento>{\n      const url = `${this.API}/${pensamento.id}`;\n      return this.http.put<Pensamento>(url, pensamento);//passando a url e o pensamento que vai ser editado\n    }\n\n    mudarFavorito(pensamento: Pensamento):Observable<Pensamento> {\n      pensamento.favorito = !pensamento.favorito;//se for true vai ser false e false vai ser true\n      //agora usar o metodo http para conseguir editar e atualizar o pensamento\n      return this.editar(pensamento);\n    }\n\n  excluir(id:number):Observable<Pensamento>{\n    const url = `${this.API}/${id}`;//passar a url e vou passar /id que e o id do pensamento\n    return this.http.delete<Pensamento>(url);\n  }\n\n  buscarPorId(id:number):Observable<Pensamento>{\n    const url = `${this.API}/${id}`;//passar a url e vou passar /id que e o id do pensamento\n    return this.http.get<Pensamento>(url);//quero buscar 1 pensamento\n  }\n\n\n\n\n}\n\n//dependencia da classe httpClient viesse até o pensamento service\n//a injeção de dependências e um padrao de projeto onde uma classe vai solicitar dependências externas ao inves cria-las\n//private esse atributo e automaticamente declarado como atributo da classe\n\n//observable funciona de forma parecida como as promisses podem ser uma transferencia de dados continua eles podem emitir dados varias vezes durante sua existencia\n\n//É possível refatorar criando uma nova instância da classe HttpParams e utilizando o método set, para substituir o valor dos parâmetros ‘pagina’ e ‘itensPorPagina’, enviando o nome do parâmetro e o seu valor. Na requisição, é passado um objeto com todos os parâmetros.\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}